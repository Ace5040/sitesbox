#!/bin/bash

SCRIPT=`realpath $0`
SCRIPTPATH=`dirname $SCRIPT`
uid=$(id -u);
gid=$(id -u);
WEBCRATE_UID_env="WEBCRATE_UID=$uid "
WEBCRATE_GID_env="WEBCRATE_GID=$gid "

cd $SCRIPTPATH/..
source .env

function generatePassword () {
  pass=`docker run --rm ace5040/webcrate-utils:stable pwgen -nyBs1 -r "\\\`{}|'?:\\$\"\\/" 16 1`
  echo "[mysqldump]" > ./var/secrets/$1.cnf
  echo "user=root" >> ./var/secrets/$1.cnf
  echo "password=\"$pass\"" >> ./var/secrets/$1.cnf
  chmod 0600 ./var/secrets/$1.cnf
  echo $pass
}

function initDbFolder () {
  if [[ ! -d "./var/$1" ]] || [ ! "$(ls -A ./var/$1)" ] ; then
      mkdir -p "./var/$1"
      if [[ ! -f "./var/secrets/$1.cnf" ]]; then
        mkdir -p "./var/secrets"
        echo $(generatePassword $1)
      fi
  fi
  echo ''
}

MYSQL_env="MYSQL_ROOT_PASSWORD=\"$(initDbFolder 'mysql')\" "
MYSQL5_env="MYSQL5_ROOT_PASSWORD=\"$(initDbFolder 'mysql5')\" "
POSTGRES_env="POSTGRES_PASSWORD=\"$(initDbFolder 'postgres')\" "

if [[ ! -d "./var/mysql" ]] ; then
  mkdir -p "./var/mysql"
fi
if [[ ! -d "./var/mysql5" ]] ; then
  mkdir -p "./var/mysql5"
fi
if [[ ! -d "./var/postgres" ]] ; then
  mkdir -p "./var/postgres"
fi
if [[ ! -d "./var/sites" ]] ; then
  mkdir -p "./var/sites"
fi
if [[ ! -d "./var/duplicity" ]] ; then
  mkdir -p "./var/sites"
fi
if [[ ! -d "./var/letsencrypt" ]] ; then
  mkdir -p "./var/letsencrypt"
fi
if [[ ! -d "./var/crontabs" ]] ; then
  mkdir -p "./var/letsencrypt"
fi
if [[ ! -d "./var/backup" ]] ; then
  mkdir -p "./var/letsencrypt"
fi
if [[ ! -d "./var/solr" ]] ; then
  mkdir -p "./var/solr/logs"
fi
if [[ ! -d "./var/influxdb" ]] ; then
  mkdir -p "./var/influxdb"
fi
grafana_password=''
if [[ ! -d "./var/grafana/data" ]] ; then
  mkdir -p "./var/grafana/data"
  mkdir -p "./var/grafana/log"
  grafana_password=`docker run --rm ace5040/webcrate-utils:stable pwgen -nyBs1 -r "\\\`{}|'?:\\$\"\\/" 16 1`
  echo "user=admin" > ./var/secrets/grafana.secret
  echo "password=\"$grafana_password\"" >> ./var/secrets/grafana.secret
fi

docker run --rm --env-file=$(pwd)/.env \
  -e WEBCRATE_UID=$uid \
  -e WEBCRATE_GID=$gid \
  -v $SITES_PATH:/sites \
  -v $(pwd)/config/users:/webcrate/users:ro \
  -v $(pwd)/config/php-pool-templates:/webcrate/custom_templates:ro \
  -v $(pwd)/var/letsencrypt:/webcrate/letsencrypt:ro \
  -v webcrate_nginx_configs_volume:/webcrate/nginx_configs \
  -v webcrate_ssl_configs_volume:/webcrate/ssl_configs \
  -v webcrate_php7_pools_volume:/webcrate/php-fpm.d \
  -v webcrate_php73_pools_volume:/webcrate/php73-fpm.d \
  -v webcrate_php5_pools_volume:/webcrate/php56-fpm.d \
  -v webcrate_dnsmasq_hosts_volume:/webcrate/dnsmasq_hosts \
  ace5040/webcrate-utils:stable \
  /webcrate/parse-users.py

docker run --rm --env-file=$(pwd)/.env \
  -v $(pwd)/config/services:/webcrate/services:ro \
  -v webcrate_nginx_configs_volume:/webcrate/nginx_configs \
  -v webcrate_dnsmasq_hosts_volume:/webcrate/dnsmasq_hosts \
  ace5040/webcrate-utils:stable \
  /webcrate/parse-services.py

bash -c "${MYSQL_env}${MYSQL5_env}${POSTGRES_env}${WEBCRATE_UID_env}${WEBCRATE_GID_env}docker-compose --project-name webcrate up --remove-orphans -d"

if [[ $grafana_password != '' ]] ; then
  docker exec --user $uid:$gid grafana grafana-cli admin reset-admin-password "$grafana_password"
fi
